/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FaceRecognitionData } from "./FaceRecognitionData";
import { FaceRecognitionDataCountArgs } from "./FaceRecognitionDataCountArgs";
import { FaceRecognitionDataFindManyArgs } from "./FaceRecognitionDataFindManyArgs";
import { FaceRecognitionDataFindUniqueArgs } from "./FaceRecognitionDataFindUniqueArgs";
import { DeleteFaceRecognitionDataArgs } from "./DeleteFaceRecognitionDataArgs";
import { FaceRecognitionDataService } from "../faceRecognitionData.service";
@graphql.Resolver(() => FaceRecognitionData)
export class FaceRecognitionDataResolverBase {
  constructor(protected readonly service: FaceRecognitionDataService) {}

  async _faceRecognitionDataItemsMeta(
    @graphql.Args() args: FaceRecognitionDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FaceRecognitionData])
  async faceRecognitionDataItems(
    @graphql.Args() args: FaceRecognitionDataFindManyArgs
  ): Promise<FaceRecognitionData[]> {
    return this.service.faceRecognitionDataItems(args);
  }

  @graphql.Query(() => FaceRecognitionData, { nullable: true })
  async faceRecognitionData(
    @graphql.Args() args: FaceRecognitionDataFindUniqueArgs
  ): Promise<FaceRecognitionData | null> {
    const result = await this.service.faceRecognitionData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FaceRecognitionData)
  async deleteFaceRecognitionData(
    @graphql.Args() args: DeleteFaceRecognitionDataArgs
  ): Promise<FaceRecognitionData | null> {
    try {
      return await this.service.deleteFaceRecognitionData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
